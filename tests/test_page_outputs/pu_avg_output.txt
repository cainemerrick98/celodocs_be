PU_AVG
Description
Calculates the average of the specified source column for each element in the given target table.
Like the regular AVG operator, the column can either be an INT or FLOAT column. The data type of the result is always a FLOAT.
Syntax
PU_AVG( target_table, source_table.column[, filter_expression])
target_table: The table to which the aggregation result should be pulled. This can be: a table from the data model. It needs to be, directly or indirectly, connected to the source_table, and there must be a 1:N relationship between the target_table and the source_table. Further documentation about join relationships can be found in Join functionality. DOMAIN_TABLE or CONSTANT(see Pull Up Aggregation Table Options)., a table from the data model. It needs to be, directly or indirectly, connected to the source_table, and there must be a 1:N relationship between the target_table and the source_table. Further documentation about join relationships can be found in Join functionality., DOMAIN_TABLE or CONSTANT(see Pull Up Aggregation Table Options)., source_table.column: The column which should be aggregated for every row of the target_table., filter_expression(optional): An optional filter expression to specify which values of the source_table.column should be taken into account for the aggregation.
a table from the data model. It needs to be, directly or indirectly, connected to the source_table, and there must be a 1:N relationship between the target_table and the source_table. Further documentation about join relationships can be found in Join functionality., DOMAIN_TABLE or CONSTANT(see Pull Up Aggregation Table Options).
NULL handling
If no value in the source table column exists for the element in the target table(either because all values of the source table are filtered out, or because no corresponding value exists in the first place), NULL will be returned. NULL values in the source table column are treated as if the row does not exist.
Examples
Description: Calculate the average of the case table values for each company code:
Queries: "companyDetail"."companyCode", PU_AVG("companyDetail","caseTable"."value")
Input Tables: 
caseTable
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
caseId: int
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
companyCode: string
companyCode: string,country: string
'001','DE'
'002','DE'
'003','US'
value: int
caseTable.companyCode,companyDetail.companyCode
Output Table: 
Column1: string,Column2: float
'001',400.0
'002',300.0
'003',200.0

caseId: int, companyCode: string, value: int
Description: PU-functions can be used in a FILTER. In this example, the company codes are filtered such that the corresponding average case table value is smaller than 300:
Queries: FILTER PU_AVG("companyDetail","caseTable"."value")< 300;, "companyDetail"."companyCode"
Input Tables: 
caseTable
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
caseId: int
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
companyCode: string
companyCode: string,country: string
'001','DE'
'002','DE'
'003','US'
value: int
caseTable.companyCode,companyDetail.companyCode
Output Table: 
Column1: string
'003'

caseId: int, companyCode: string, value: int
Description: PU-functions can be used inside another aggregation function. In this example, the maximum value of all average case table values for each company code is calculated:
Queries: MAX( PU_AVG("companyDetail","caseTable"."value"))
Input Tables: 
caseTable
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
caseId: int
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
companyCode: string
companyCode: string,country: string
'001','DE'
'002','DE'
'003','US'
value: int
caseTable.companyCode,companyDetail.companyCode
Output Table: 
Column1: float
400.0

caseId: int, companyCode: string, value: int
Description: Calculate the average of the case table values for each company code. Only consider cases with an ID larger than 2:
Queries: "companyDetail"."companyCode", PU_AVG("companyDetail","caseTable"."value","caseTable"."caseID"> 2)
Input Tables: 
caseTable
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
caseId: int
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
companyCode: string
companyCode: string,country: string
'001','DE'
'002','DE'
'003','US'
value: int
caseTable.companyCode,companyDetail.companyCode
Output Table: 
Column1: string,Column2: float
'001',200.0
'002',300.0
'003',200.0

caseId: int, companyCode: string, value: int
Description: Calculate the sum of the case table values for each company code. Only consider cases with an ID larger than 3. All case table values for companyCode'001' are filtered out, which means that in this case, NULL is returned.
Queries: "companyDetail"."companyCode", PU_AVG("companyDetail","caseTable"."value","caseTable"."caseID"> 3)
Input Tables: 
caseTable
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
caseId: int
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
companyCode: string
companyCode: string,country: string
'001','DE'
'002','DE'
'003','US'
value: int
caseTable.companyCode,companyDetail.companyCode
Output Table: 
Column1: string,Column2: float
'001',null
'002',300.0
'003',200.0

caseId: int, companyCode: string, value: int
Description: Example over three tables: For each entry in table B, calculate the average of all connected values in table C. Tables B and C do not have a direct connection, but are connected via table A:
Queries: "B"."B_KEY", PU_AVG("B","C"."VALUE")
Input Tables: 
A
B_KEY: int,C_KEY: string,VALUE: int
1,'A',100
1,'B',200
2,'C',300
2,'D',400
3,'E',500
3,'F',600
B_KEY: int
B_KEY: int,C_KEY: string,VALUE: int
1,'A',100
1,'B',200
2,'C',300
2,'D',400
3,'E',500
3,'F',600
C_KEY: string
B_KEY: int
1
2
VALUE: int
C_KEY: string,VALUE: int
'A',400
'A',100
'A',200
'B',100
'C',200
'D',500
1
A.C_KEY,C.C_KEY
B.B_KEY,A.B_KEY
Output Table: 
Column1: int,Column2: float
1,200.0
2,350.0

B_KEY: int, C_KEY: string, VALUE: int
Description: For each case ID, calculate the average of the case table values for the associated company code using DOMAIN_TABLE:
Queries: "caseTable"."caseId", PU_AVG( DOMAIN_TABLE("caseTable"."companyCode"),"caseTable"."value")
Input Tables: 
caseTable
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
caseId: int
caseId: int,companyCode: string,value: int
1,'001',600
2,'001',400
3,'001',200
4,'002',300
5,'002',300
6,'003',200
Output Table: 
Column1: int,Column2: float
1,400.0
2,400.0
3,400.0
4,300.0
5,300.0
6,200.0

caseId: int, companyCode: string, value: int
See also:
AVG